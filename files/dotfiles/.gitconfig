[user]
	name = Josia Scheytt
	email = jscheytt@googlemail.com
[includeIf "hasconfig:remote.*.url:git@gitlab.com:*/**"]
  path = ~/.gitconfig-work
[core]
  attributesfile = ~/.gitattributes 
  excludesfile = ~/.gitignore_global
[push]
	default = simple
	autoSetupRemote = true
[branch]
	autoSetupMerge = simple
	sort = -committerdate
[column]
	ui = auto
[init]
  defaultBranch = main
[pull]
	rebase = true
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[pager]
	diff = delta
	log = delta
	reflog = delta
	show = delta
[interactive]
	diffFilter = delta --color-only --features=interactive
[alias]
  ; What is the default branch of this repo?
  ; The first command asks the remote if the default branch was changed.
  default-branch = "! git remote set-head origin -a > /dev/null && git rev-parse --abbrev-ref origin/HEAD | sed 's#origin/##'"
  ; *Switch* to the *default* branch.
  swd = !git switch $(git default-branch)
  ; Which branches have been merged into the default branch on the remote?
  ; For safety, manually add names of long-lived branches to the grep pattern.
  remotely-merged-branches = "! git branch --all --merged $(git default-branch) | { grep -vE '^\\*|(\\b($(git default-branch)|develop|main|master|quality)\\b)' || true; } | sed 's#remotes/origin/##'"
  ; Delete those branches on the remote which were merged.
  push-delete-remotely-merged-branches = "! git switch-default &> /dev/null && git remotely-merged-branches | xargs -I {} git push origin --delete {}"
  ; Which local branches are not present on the remote (but were once)?
  ; NOTE: `git remote prune origin` only deletes local snapshots
  ; of remote branches that were deleted on the remote.
  ; See https://stackoverflow.com/a/48820687/6435726
  ; It will not delete local branches where the remote branch is "gone".
  ; This command finds these local branches.
  local-branches-without-remote = "! git remote prune origin && git branch --list --format '%(if:equals=[gone])%(upstream:track)%(then)%(refname)%(end)' | awk NF | sed 's#refs/heads/##'"
  ; Delete local branches that are not present on the remote
  ; (safely, including warnings).
  ; You can ignore the warnings by passing "-D" as a parameter.
  ; NOTE: `git remote prune origin` only deletes local snapshots
  ; of remote branches that were deleted on the remote.
  ; It will not delete local branches where the remote branch is "gone".
  delete-local-branches-without-remote = "! git local-branches-without-remote | xargs -I {} git branch ${1:-'-d'} {}"
  ; Output file contents from any revision
  ; See https://stackoverflow.com/a/54819889/6435726
  cat = !git show "$1:$2"
  ; Fetch new branches, then *switch* to the *newest* one
  swn = "! git fetch 2>&1 | { grep '\\[new branch\\]' || true; } | tail -n1 | awk '{print $NF;}' | sed 's#origin/##' | xargs -I {} git switch {}"
  ; Pretty log from https://stackoverflow.com/a/34467298/6435726
  lg = lg1
  lg1 = lg1-specific --all
  lg2 = lg2-specific --all
  lg3 = lg3-specific --all
  lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(normal)%s%C(reset) %C(bold normal)- %an%C(reset)%C(auto)%d%C(reset)'
  lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(normal)%s%C(reset) %C(bold normal)- %an%C(reset)'
  lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(normal)%s%C(reset)%n''          %C(bold normal)- %an <%ae> %C(reset) %C(bold normal)(committer: %cn <%ce>)%C(reset)'
  ; GitLab only: Push branch, create merge request, merge MR when pipeline succeeds.
  mwps = push -o merge_request.create -o merge_request.merge_when_pipeline_succeeds
  # `git log` with patches shown with difftastic.
  dl = -c diff.external=difft log -p --ext-diff
  # Show the most recent commit with difftastic.
  ds = -c diff.external=difft show --ext-diff
  # `git diff` with difftastic.
  dft = -c diff.external=difft diff
