plugins:
  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/argocd.yaml
  argocd:
    shortCut: "s"
    description: Sync ArgoCD Application
    scopes:
      - application
    command: argocd
    args:
      - app
      - sync
      - $NAME
      - --app-namespace
      - $NAMESPACE
    background: true
    confirm: true

  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/debug-container.yaml
  # --- Create debug container for selected pod in current namespace
  # See https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod/#ephemeral-container
  debug:
    shortCut: Shift-D
    description: Add debug container
    dangerous: true
    scopes:
      - containers
    command: bash
    background: false
    confirm: true
    args:
      - -c
      - >-
        kubectl --kubeconfig=$KUBECONFIG debug -it --context $CONTEXT
        -n=$NAMESPACE $POD --target=$NAME --image=nicolaka/netshoot:v0.13
        --share-processes -- bash

  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/dive.yaml
  dive:
    shortCut: d
    confirm: false
    description: "Dive image"
    scopes:
      - containers
    command: dive
    background: false
    args:
      - $COL-IMAGE

  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/remove-finalizers.yaml
  # Removes all finalizers from the selected resource. Finalizers are namespaced keys that tell Kubernetes to wait
  # until specific conditions are met before it fully deletes resources marked for deletion.
  # Before deleting an object you need to ensure that all finalizers has been removed. Usually this would be done
  # by the specific controller but under some circumstances it is possible to encounter a set of objects blocked
  # for deletion.
  # This plugin makes this task easier by providing a shortcut to directly removing them all.
  # Be careful when using this plugin as it may leave dangling resources or instantly deleting resources that were
  # blocked by the finalizers.
  # Author: github.com/jalvarezit
  remove_finalizers:
    shortCut: Ctrl-F
    confirm: true
    dangerous: true
    scopes:
      - all
    description: |
      Removes all finalizers from selected resource. Be careful when using it,
      it may leave dangling resources or delete them
    command: kubectl
    background: true
    args:
      - patch
      - --context
      - $CONTEXT
      - --namespace
      - $NAMESPACE
      - $RESOURCE_NAME.$RESOURCE_GROUP
      - $NAME
      - -p
      - '{"metadata":{"finalizers":null}}'
      - --type
      - merge

  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/rm-ns.yaml
  # remove finalizers from a stuck namespace
  rm-ns:
    shortCut: n
    confirm: true
    dangerous: true
    description: Remove NS Finalizers
    scopes:
      - namespace
    command: sh
    background: false
    args:
      - -c
      - >-
        kubectl get namespace $NAME -o json | jq '.spec.finalizers=[]'
        | kubectl replace --raw /api/v1/namespaces/$NAME/finalize -f - > /dev/null

  ### https://github.com/derailed/k9s/blob/af8aa5fc41b3db202941a264a3011f490bede97b/plugins/watch-events.yaml
  # watch events on selected resources
  # requires linux "watch" command
  # change '-n' to adjust refresh time in seconds
  watch-events:
    shortCut: Shift-E
    confirm: false
    description: Get Events
    scopes:
      - all
    command: sh
    background: false
    args:
      - -c
      - "kubectl events --context $CONTEXT --namespace $NAMESPACE --for $RESOURCE_NAME.$RESOURCE_GROUP/$NAME --watch"

  node-shell:
    shortCut: Shift-S
    description: Run Node Shell
    scopes:
      - nodes
    command: bash
    background: false
    confirm: false
    args:
      - -c
      - kubectl node-shell $NAME

  ### https://github.com/derailed/k9s/blob/8b2939c4ff69a34eb2f6b3d0b772c99917df1c1d/plugins/resource-recommendations.yaml
  # Author: Daniel Rubin
  # Get recommendations for CPU/Memory requests and limits using Robusta KRR
  # Requires Prometheus in the Cluster and Robusta KRR (https://github.com/robusta-dev/krr) on your system
  # Open K9s in deployments/daemonsets/statefulsets view, then:
  # Shift-K to get recommendations
  krr:
    shortCut: Shift-K
    description: Get krr
    scopes:
      - deployments
      - daemonsets
      - statefulsets
    command: bash
    background: false
    confirm: false
    args:
      - -c
      - |
        LABELS=$(kubectl get $RESOURCE_NAME $NAME -n $NAMESPACE  --context \
        $CONTEXT  --show-labels | awk '{print $NF}' | awk '{if(NR>1)print}')
        krr simple --cluster $CONTEXT --selector $LABELS
        echo "Press 'q' to exit"
        while : ; do
        read -n 1 k <&1
        if [[ $k = q ]] ; then
        break
        fi
        done
